<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Welcome</title>
    <link href="https://fonts.googleapis.com/css?family=IBM+Plex+Sans:400,600" rel="stylesheet">
    <link rel="stylesheet" href="/style.css">
	<script src="https://unpkg.com/animejs@3.0.1/lib/anime.min.js"></script>
    <script src="https://unpkg.com/scrollreveal@4.0.0/dist/scrollreveal.min.js"></script>
</head>

<style>
    
    #heading
    {
        font-size: 50px;
        font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;

    }
</style>
<style>
    .overlay {
  position: relative;
  left: 50%;
  transform: translate(-50%, -50%);
  
  max-height: 80%; 
  overflow-y: auto; 
  overflow-x: hidden;
}

    .img {
    padding: 10px;
    background: linear-gradient(to left top, #15181D, rgba(255, 255, 255, 0.467));
    transition: opacity 0.5s ease-in-out;
    opacity: 0;
}

    #gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 5px;
    }

    #gallery img {
        max-width: 100%;
        max-height: 100%;
    }

    .loader {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 20px auto;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .loader-container {
        display: none; /* Initially hidden */
        text-align: center;
    }

    .delete-btn {
        color: rgb(250, 72, 72);
        cursor: pointer;
        background: none;
        border: none;
        font-size: 10px;
        /* border: 1px solid black; */
    }

    .delete-btn:hover {
        color: darkred;
        text-decoration: underline;
    }

    .photo-name{
        color: aqua;
      /* border: 1px solid black; */
      font-size: 15px;
    }

    .message {
        text-align: center;
        margin: 10px 0;
    }

    .message.success {
        color: green;
    }

    .message.error {
        color: red;
    }
    
    .message {
        text-align: center;
        margin: 10px 0;
        opacity: 0; /* Initially hidden */
        transition: opacity 0.5s ease-in-out; /* Smooth transition for fade in/out */
    }

    .message.success {
        color: green;
    }

    .message.show {
        color: green;
        opacity: 1; /* Make visible when 'show' class is added */
    }
</style>

<body class="is-boxed has-animations">
    <div class="body-wrap">
        
        <main>
            <section class="hero">
                <h2 class="overlay" id="heading">welcome To the photo gaalery</h2>
                <div class="container">
                    <div id="heading"></div>
                    <div class="hero-inner ">
						<div class="hero-copy ">
            
						</div>
						<div class="hero-figure anime-element">
							<svg class="placeholder" width="528" height="396" viewBox="0 0 528 396">
								<rect width="528" height="396" style="fill:transparent;" />
							</svg>
							<div class="hero-figure-box hero-figure-box-01" data-rotation="45deg"></div>
							<div class="hero-figure-box hero-figure-box-02" data-rotation="-45deg"></div>
							<div class="hero-figure-box hero-figure-box-03" data-rotation="0deg"></div>
							<div class="hero-figure-box hero-figure-box-04" data-rotation="-135deg"></div>
							<div class="hero-figure-box hero-figure-box-05"></div>
							<div class="hero-figure-box hero-figure-box-06"></div>
							<div class="hero-figure-box hero-figure-box-07"></div>
							<div class="hero-figure-box hero-figure-box-08" data-rotation="-22deg"></div>
							<div class="hero-figure-box hero-figure-box-09" data-rotation="-52deg"></div>
							<div class="hero-figure-box hero-figure-box-10" data-rotation="-50deg"></div>
						</div>
                    </div>
                </div>
                
                <div class="jumbotron overlay ">
                    <div class="container ">
                       
                        <div id="loader-container" class="loader-container">
                           
                            <div class="loader"></div> <!-- Loader for loading photos -->
                            <div>please wait...</div><br><br>
                        </div>
                    
                        <body onload="loadPhotos()">
                            <div id="gallery"></div> <!-- A container for the gallery -->
                        </body>
        
                        <div id="message-container" class="message"></div> <!-- Display success/error message -->
                        <!-- <div id="upload-loader" class="loader" style="display: none;"></div> Loader for upload -->
            
                        <div id="progress-bar-container" style="width: 100%; height: 10px; background: #ddd;  display: none;">
                            <div id="progress-bar" style="width: 0%; height: 100%; background: rgb(7, 205, 249); text-align: center;">
                                0% <!-- This text should be inside the progress bar -->
                            </div>
                        </div>
                        choose a photo to upload
           
                        <form onsubmit="uploadPhoto(event)" enctype="multipart/form-data"> <!-- Trigger uploadPhoto -->
                            <input type="file" name="photo" /><!-- File input for the photo -->
                            <button type="submit">Upload</button> <!-- Submit button -->
                        </form>
                    </div>
                </div>
        

            </section>
         </div>
        
                </div>
            </section>




			
        </main>

         </div>

    <script src="/main.min.js"></script>

   
      <script>
        // Retrieve the username from the query parameters
        const urlParams = new URLSearchParams(window.location.search);
        const username = urlParams.get('username');

        // Display the username on the page
        document.getElementById('username').textContent = username;

        function uploadPhoto(event) {
            event.preventDefault(); // Prevent default form behavior

            const form = event.target; // Get the form
            const formData = new FormData(form); // Create FormData for file upload

            const progressBarContainer = document.getElementById('progress-bar-container'); // Progress bar container
            const progressBar = document.getElementById('progress-bar'); // Progress bar reference
            const messageContainer = document.getElementById('message-container'); // Message container reference

            progressBarContainer.style.display = 'block'; // Display progress bar

            const xhr = new XMLHttpRequest(); // Create a new XMLHttpRequest

            xhr.upload.addEventListener('progress', (event) => {
                if (event.lengthComputable) {
                    const percentComplete = Math.round((event.loaded / event.total) * 100); // Calculate percentage
                    progressBar.style.width = percentComplete + '%';
                    progressBar.textContent = percentComplete.toFixed(0) + '%';
                }
            });

            xhr.onreadystatechange = () => {
                if (xhr.readyState === 4) {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        progressBar.style.width = '0%';
                        progressBar.textContent = '0%';
                        showSuccessMessage();
                        const response = JSON.parse(xhr.responseText);
                        appendPhoto(response); // Append the newly uploaded photo
                    } else {
                        messageContainer.textContent = `Error: ${xhr.statusText} (${xhr.status}). Please try again.`;
                        messageContainer.className = 'message error';
                    }

                    // Reset progress bar on completion
                    progressBar.style.width = '0%'; // Reset width
                    progressBar.textContent = '0%'; // Reset text
                }
            };

            xhr.open('POST', '/upload', true); // Open a POST request
            xhr.send(formData); // Send form data
        }

        async function loadPhotos() {
            const loaderContainer = document.getElementById('loader-container'); // Loader container
            const gallery = document.getElementById('gallery'); // Gallery reference

            loaderContainer.style.display = 'block'; // Show loader while loading photos

            try {
                const response = await fetch('/photos');
                const photos = await response.json();
                gallery.innerHTML = ''; // Clear existing content

                loaderContainer.style.display = 'none'; // Hide loader when done

                for (let i = 0; i < photos.length; i++) {
                    appendPhoto(photos[i], i); // Append each photo to the gallery
                }
            } catch (error) {
                console.error('Error loading photos:', error);
                loaderContainer.style.display = 'none'; // Hide loader on error
            }
        }

        function appendPhoto(photo, index) {
            const gallery = document.getElementById('gallery'); // Gallery reference

            const img = document.createElement('img'); // Create image
            img.src = `data:${photo.mime_type};base64,${photo.data}`;
            img.alt = photo.name;
            img.className = 'img';
            img.controls = true;

            const deleteButton = document.createElement('button'); // Create delete button
            deleteButton.textContent = 'Delete';
            deleteButton.className = 'delete-btn';
            deleteButton.onclick = () => deletePhoto(photo.id, index); // Call delete function

            const photoName = document.createElement('p'); // Show photo name
            photoName.textContent = photo.name;
            photoName.className = 'photo-name';

            const photoContainer = document.createElement('div'); // Create container
            photoContainer.appendChild(img);
            photoContainer.appendChild(deleteButton);
            photoContainer.appendChild(photoName);

            gallery.appendChild(photoContainer); // Add to gallery

            setTimeout(() => {
                img.style.opacity = 1; // Fade in the image
            }, index * 200); // Delay for each image
        }

        function deletePhoto(photoId, index) {
            if (!confirm('Are you sure you want to delete this photo?')) {
                return; // Cancel deletion if user doesn't confirm
            }

            fetch(`/photos/${photoId}`, {
                method: 'DELETE', // DELETE request
            })
                .then((response) => {
                    if (response.status === 200) {
                        console.log('Photo deleted successfully');
                        const gallery = document.getElementById('gallery');
                        gallery.removeChild(gallery.childNodes[index]);
                        // Remove the deleted photo container from the gallery
                        showSuccessMessage('Photo deleted successfully!');
                    } else {
                        console.error('Failed to delete photo');
                        showErrorMessage('Failed to delete photo. Please try again.');
                    }
                })
                .catch((error) => {
                    console.error('Error deleting photo:', error);
                    showErrorMessage('Error deleting photo. Please try again.');
                });
        }

        function showSuccessMessage(message) {
            const messageContainer = document.getElementById('message-container'); // Get message container
            messageContainer.classList.add('show'); // Show the message by adding 'show' class
            messageContainer.textContent = message; // Set the success message
            setTimeout(() => {
                messageContainer.classList.remove('show'); // Hide message after a few seconds
            }, 3000); // Duration for displaying the message
        }

        function showErrorMessage(message) {
            const messageContainer = document.getElementById('message-container'); // Get message container
            messageContainer.classList.add('show', 'error'); // Show the message by adding 'show' class
            messageContainer.textContent = message; // Set the error message
            setTimeout(() => {
                messageContainer.classList.remove('show', 'error'); // Hide message after a few seconds
            }, 3000); // Duration for displaying the message
        }

        // Initial load of photos when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            loadPhotos();
        });

    </script>
</body>
</html>