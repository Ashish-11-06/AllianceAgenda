<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AA Communication</title>

    <style>
        #messages {
            border: 1px solid #ccc;
            padding: 20px;
            overflow-y: auto;
            width: 100%;
            max-width: 800px;
            height: 200px;
            transition: height 0.3s;
        }

        #message-form {
            display: flex;
            width: 100%;
            max-width: 800px;
            background-color: #f2f2f2;
            padding: 10px;
            border: 1px solid #ccc;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        #message-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
            font-size: 16px;
        }

        button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        p {
            margin: 5px 0;
            font-size: 14px;
        }

        #messages p {
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 10px;
        }

        #messages p:nth-child(even) {
            /* background-color: #f5f5f5; */
        }

        #messages p:hover {
            background-color: #f9f9f9;
        }

        #message-input:focus {
            outline: none;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.2);
        }

        #messages .sent {
            align-self: flex-end;
            text-align: right;
        }

        #messages .received {
            align-self: flex-start;
            text-align: left;
        }

        /* Username colors */
        .username-color-1 {
            color: #007bff;
        }

        .username-color-2 {
            color: #28a745;
        }

        .username-color-3 {
            color: #dc3545;
        }

        .username-color-4 {
            color: #ffc107;
        }
    </style>
</head>

<body>
    <div id="messages"></div>
    <form id="message-form">
        <input type="hidden" id="userId"> <!-- Ensure user_id is passed from server-side -->
        <input type="text" id="message-input" placeholder="Type your message here...">
        <button type="submit">Send</button>
    </form>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const userId = urlParams.get('id');
        $("#userId").val(userId);  // Set userId to hidden input field

        const messagesDiv = $("#messages");
        const messageForm = $("#message-form");
        const messageInput = $("#message-input");

        const socket = io("http://localhost:3000");

        const scrollToBottom = () => {
            messagesDiv.scrollTop(messagesDiv[0].scrollHeight);
        };

        const adjustMessagesHeight = () => {
            const numMessages = messagesDiv.children().length;
            const baseHeight = 200;
            const heightPerMessage = 20;
            const maxDivHeight = 400;

            const newHeight = Math.min(baseHeight + numMessages * heightPerMessage, maxDivHeight);
            messagesDiv.css("height", `${newHeight}px`);
        };

        const sendMessage = () => {
            const message = messageInput.val().trim();
            const sender_id = $("#userId").val();

            if (sender_id && message) {
                // Emit the message to the server
                socket.emit("chat message", { sender_id, content: message });
            }
        };

        const convertToIST = (dateString) => {
            const date = new Date(dateString);
            const options = { timeZone: "Asia/Kolkata", year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit", second: "2-digit" };
            return new Intl.DateTimeFormat("en-US", options).format(date);
        };

        socket.on("chat message", (data) => {
            const messageElement = $("<p></p>").addClass(data.sender_id == userId ? 'sent' : 'received');
            const sentAtIST = convertToIST(data.sent_at);
            const usernameClass = `username-color-${data.sender_id % 4 + 1}`;
            if (data.sender_id == userId) {
                messageElement.html(`${data.content} <br><span>${sentAtIST}</span>`);
            } else {
                messageElement.html(`<strong class="${usernameClass}">${data.fullName} (${sentAtIST}):</strong> ${data.content}`);
            }
            messagesDiv.append(messageElement);

            scrollToBottom();
            adjustMessagesHeight();
        });

        messageForm.on("submit", (e) => {
            e.preventDefault();
            sendMessage();
            messageInput.val("");
        });

        const fetchOldMessages = () => {
            $.get('/messages', (data) => {
                data.forEach((message) => {
                    const formattedTimestamp = convertToIST(message.sent_at);
                    const messageElement = $("<p></p>").addClass(message.sender_id == userId ? 'sent' : 'received');
                    const usernameClass = `username-color-${message.sender_id % 4 + 1}`;
                    if (message.sender_id == userId) {
                        messageElement.html(`${message.content} <br><span>${formattedTimestamp}</span>`);
                    } else {
                        messageElement.html(`<strong class="${usernameClass}">${message.sender_id}, ${message.firstName} ${message.lastName} (${formattedTimestamp}):</strong> ${message.content}`);
                    }
                    messagesDiv.append(messageElement);
                });

                adjustMessagesHeight();
                scrollToBottom();
            });
        };

        $(document).ready(() => {
            fetchOldMessages();
        });
    </script>
</body>

</html>
